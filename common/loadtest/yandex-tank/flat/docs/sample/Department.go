// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package sample

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Department struct {
	_tab flatbuffers.Table
}

func GetRootAsDepartment(buf []byte, offset flatbuffers.UOffsetT) *Department {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Department{}
	x.Init(buf, n+offset)
	return x
}

func FinishDepartmentBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsDepartment(buf []byte, offset flatbuffers.UOffsetT) *Department {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Department{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedDepartmentBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Department) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Department) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Department) Code() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Department) Time() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Department) MutateTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *Department) Employee(obj *Employee) *Employee {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Employee)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func DepartmentStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func DepartmentAddCode(builder *flatbuffers.Builder, code flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(code), 0)
}
func DepartmentAddTime(builder *flatbuffers.Builder, time int64) {
	builder.PrependInt64Slot(1, time, 0)
}
func DepartmentAddEmployee(builder *flatbuffers.Builder, employee flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(employee), 0)
}
func DepartmentEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
