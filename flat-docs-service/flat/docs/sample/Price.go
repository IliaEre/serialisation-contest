// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package sample

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Price struct {
	_tab flatbuffers.Table
}

func GetRootAsPrice(buf []byte, offset flatbuffers.UOffsetT) *Price {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Price{}
	x.Init(buf, n+offset)
	return x
}

func FinishPriceBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsPrice(buf []byte, offset flatbuffers.UOffsetT) *Price {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Price{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedPriceBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Price) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Price) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Price) CategoryA() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Price) CategoryB() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Price) CategoryC() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func PriceStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func PriceAddCategoryA(builder *flatbuffers.Builder, categoryA flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(categoryA), 0)
}
func PriceAddCategoryB(builder *flatbuffers.Builder, categoryB flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(categoryB), 0)
}
func PriceAddCategoryC(builder *flatbuffers.Builder, categoryC flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(categoryC), 0)
}
func PriceEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
